%% 修仙放置MMO服务端 - 逻辑分层架构图
graph TD
%% === 外部接口层 ===
subgraph InterfaceLayer["🌐 接口层（Interface Layer）"]
A1[HTTP 登录接口<br>Gin]
A2[WebSocket 服务<br> Gorilla]
end

%% === Actor 层 ===
subgraph ActorLayer["🎭 Actor 层（Actor Layer, protoactor-go）"]
B1[GatewayActor<br>连接管理与消息路由]
B2[PlayerActor<br>玩家聚合根,持有所有状态]
B3[SequenceActor<br>单个修炼序列（采集/打坐/炼丹）]
B4[SchedulerActor<br>统一 Tick 调度]
B5[PersistActor<br>异步持久化队列]
B6[TeamActor<br>组队逻辑（扩展）]
B7[WorldActor<br>排行榜/活动系统（扩展）]
end

%% === 领域层 ===
subgraph DomainLayer["📚 领域层（Domain Layer）"]
C1[domain.Player<br>玩家领域对象]
C2[domain.Sequence<br>修炼序列规则]
C3[domain.Formula<br>产出与成长曲线]
C4[domain.Items<br>物品与资源定义]
end

%% === 持久层 ===
subgraph PersistLayer["💾 持久层（Persistence Layer）"]
D1[Repository Interface<br>存储接口抽象]
D2[Redis / Postgres / JSON Snapshot]
end

%% === 层内关系 ===
A1 --> B1
A2 --> B1
B1 --> B2
B2 --> B3
B4 --> B3
B3 --> B2
B2 --> B5
B5 --> D1
D1 --> D2

%% Domain interactions
B2 --> C1
B3 --> C2
C2 --> C3
C1 --> C4

%% Optional extensions
B2 --> B6
B2 --> B7
B6 --> B3
B7 --> B5

%% Annotations
classDef layer fill:#2b2b2b,stroke:#777,color:#fff,stroke-width:1px;
classDef actor fill:#32394a,stroke:#888,color:#fff,stroke-width:1px;
classDef domain fill:#2e463d,stroke:#888,color:#fff,stroke-width:1px;
classDef persist fill:#383838,stroke:#888,color:#fff,stroke-width:1px;

class InterfaceLayer,ActorLayer,DomainLayer,PersistLayer layer;
class B1,B2,B3,B4,B5,B6,B7 actor;
class C1,C2,C3,C4 domain;
class D1,D2 persist;
